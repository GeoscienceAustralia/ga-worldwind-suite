/*******************************************************************************
 * Copyright 2012 Geoscience Australia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package au.gov.ga.worldwind.animator.ui.parametereditor;

import java.util.List;

import au.gov.ga.worldwind.animator.animation.parameter.Parameter;


/**
 * An interface for a model that backs the {@link ParameterCurve} component
 * 
 * @author James Navin (james.navin@ga.gov.au)
 */
public interface ParameterCurveModel
{

	/** Destroys this curve. Once called, no further updates will take place for the curve. */
	void destroy();
	
	/**
	 * Acquire a lock on the model, allowing multiple reads from the model.
	 * <p/>
	 * Prevents the model from being updated until the {@link #unlock()} method is called.
	 */
	void lock();
	
	/**
	 * Unlock the model, allowing the model to be updated.
	 */
	void unlock();

	/**
	 * @return The parameter value at the provided frame
	 */
	double getValueAtFrame(int frame);

	/**
	 * @return The minimum value of the parameter this model is reflecting
	 */
	double getMinValue();
	
	/**
	 * @return The maximum value of the parameter this model is reflecting
	 */
	double getMaxValue();

	/**
	 * @return The lowest frame of the parameter this model is reflecting
	 */
	int getMinFrame();
	
	/**
	 * @return The highest frame of the parameter this model is reflecting
	 */
	int getMaxFrame();
	
	/**
	 * @return The framecount of the animation the parameter this model is reflecting
	 */
	int getAnimationFrameCount();
	
	/**
	 * @return The current animation frame
	 */
	int getCurrentFrame();
	
	/**
	 * @return The label to use for the parameter this model is reflecting
	 */
	String getParameterLabel();
	
	/**
	 * Add a model listener to this model
	 */
	void addListener(ParameterCurveModelListener listener);

	/**
	 * Remove the provided model listener from this model
	 */
	void removeListener(ParameterCurveModelListener listener);
	
	/**
	 * @return The key frame nodes of the parameter curve
	 */
	List<ParameterCurveKeyNode> getKeyFrameNodes();
	
	/**
	 * An interface for listeners who want to respond to events generated by a {@link ParameterCurveModel}
	 */
	public static interface ParameterCurveModelListener
	{
		void curveChanged();
	}

	Parameter getParameter();
}
